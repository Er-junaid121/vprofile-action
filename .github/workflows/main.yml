name: vprofile actions

on: workflow_dispatch

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: vprofile-app
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Run Maven Tests
      run: mvn clean test

    - name: Run Checkstyle
      run: mvn checkstyle:checkstyle

    - name: Set up SonarQube
      uses: warchant/setup-sonar-scanner@v7

    - name: Run SonarCloud Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.host.url=${{ secrets.SONAR_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.sources=src/ \
          -Dsonar.junit.reportsPath=target/surfire-reports/ \
          -Dsonar.jacoco.reportsPath=target/jacoco.exec \
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

    - name: SonarCloud Quality Gate Check
      id: quality-gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_URL }}/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" | jq -r .projectStatus.status)
        if [ "$STATUS" != "OK" ]; then
          echo "Quality Gate failed: $STATUS"
          exit 1
        else
          echo "Quality Gate passed: $STATUS"
        fi
      shell: bash

  BUILD_AND_PUBLISHED:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
    - name: Code Checkout
      uses: actions/checkout@v4

    - name: Build and Upload image to ECR
      uses: appleboy/docker-ecr-action@master
      with:
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        registry: ${{ secrets.REGISTRY }}
        region: ${{ env.AWS_REGION }}
        repo: ${{ env.ECR_REPOSITORY }}
        tags: latest,${{ github.run_number }}
        daemon_off: false
        dockerfile: ./Dockerfile
        context: ./

  DeployToEKS:
    needs: BUILD_AND_PUBLISHED
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Kube config file
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

    - name: Login to ECR
      run: kubectl create secret docker-registry regcred \ --docker-server=${{ secrets.REGISTRY }} \ --docker-username=AWS \ --docker-password=$(aws ecr get-login-password)

    - name: Deploy Helm
      uses: bitovi/github-action-deploy-eks-helm@v1.2.8
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        cluster-name: ${{ env.EKS_CLUSTER }}
        chart-path: helm/vprofilecharts
        namespace: default
        values: |
          appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
        name: vprofile-stack
