name: vprofile actions

on: workflow_dispatch

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: vprofile-app
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Run Maven Tests
      run: mvn clean test

    - name: Run Checkstyle
      run: mvn checkstyle:checkstyle

    - name: Set up SonarCloud Scanner
      uses: SonarSource/sonarcloud-github-action@v1

    - name: Run SonarCloud Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.host.url=${{ secrets.SONAR_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.sources=src/ \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml

    - name: SonarCloud Quality Gate Check
      # Manual Quality Gate Check
      id: quality-gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_URL }}/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" | jq -r .projectStatus.status)
        if [ "$STATUS" != "OK" ]; then
          echo "Quality Gate failed: $STATUS"
          exit 1
        else
          echo "Quality Gate passed: $STATUS"
        fi
      shell: bash

  BUILD_AND_PUBLISHED:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
    - name: Code Checkout
      uses: actions/checkout@v4

    - name: Build and Upload image to ECR
      uses: appleboy/docker-ecr-action@master
      with:
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        registry: ${{ secrets.REGISTORY }}
        region: ${{ env.AWS_REGION }}
        tags: latest ${{ github.run_number }}
        daemon_off: false
        dockerfile: ./Dockerfile
        context: ./
